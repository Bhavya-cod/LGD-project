CREATE DATABASE LGD_Management;
use LGD_Management;

CREATE TABLE roles(role_id INT AUTO_INCREMENT PRIMARY KEY,
                   role_name VARCHAR(100) NOT NULL UNIQUE);
CREATE TABLE users(user_id INT AUTO_INCREMENT PRIMARY KEY,
                   name VARCHAR(100),
                   email VARCHAR(200) NOT NULL UNIQUE,
                   password VARCHAR(255) NOT NULL,
                   role_id INT NOT NULL,
                   FOREIGN KEY(role_id) REFERENCES roles(role_id)
                   );
                   
CREATE TABLE TrainingRequest(request_id INT AUTO_INCREMENT PRIMARY KEY,
                             title VARCHAR(255) NOT NULL,
                             discription TEXT,
                             status ENUM('Pending','Approved','Rejected') DEFAULT 'Pending',
                             account_manager_id INT,
                             FOREIGN KEY (account_manager_id) REFERENCES users(user_id));

                             
CREATE TABLE courses(course_id INT AUTO_INCREMENT PRIMARY KEY,
                     title VARCHAR(255) NOT NULL,
                     description TEXT,
                     created_by INT,
                     FOREIGN KEY(created_by) REFERENCES users(user_id)); 

CREATE TABLE assignments(assignment_id INT AUTO_INCREMENT PRIMARY KEY,
                         course_id INT,
                         employee_id INT,
                         FOREIGN KEY(course_id) REFERENCES courses(course_id),
                         FOREIGN KEY(employee_id) REFERENCES users(user_id));
                         
CREATE TABLE progress(progress_id INT AUTO_INCREMENT PRIMARY KEY,
                      course_id INT,
                      employee_id INT,
                      progress_percent INT DEFAULT 0,
                      FOREIGN KEY(course_id) REFERENCES courses(course_id),
					  FOREIGN KEY(employee_id) REFERENCES users(user_id));

CREATE TABLE feedback(feedback_id INT AUTO_INCREMENT PRIMARY KEY,
					  course_id INT,
                      employee_id INT,
                      rating INT CHECK (rating BETWEEN 1 AND 5),
                      comments TEXT,
                      FOREIGN KEY(course_id) REFERENCES courses(course_id),
					  FOREIGN KEY(employee_id) REFERENCES users(user_id));
                      
INSERT INTO Roles (role_name) VALUES 
('Admin'), 
('Account Manager'), 
('Employee');


INSERT INTO Users (name, email, password, role_id) VALUES
('Rahul Sharma', 'rahul.sharma@example.com', 'password123', 1), -- Admin
('Priya Singh', 'priya.singh@example.com', 'password123', 2), -- Account Manager
('Amit Verma', 'amit.verma@example.com', 'password123', 3), -- Employee
('Neha Jain', 'neha.jain@example.com', 'password123', 3); -- Employee

INSERT INTO TrainingRequest (title, discription, account_manager_id) VALUES
('Java Programming Training', 'Training for core Java concepts.', 2),
('Advanced Web Development', 'Training for React and Node.js.', 2);

INSERT INTO Courses (title, description, created_by) VALUES
('Core Java Programming', 'Detailed course on Java basics and OOPs.', 1),
('Full Stack Web Development', 'Comprehensive training on frontend and backend.', 1);

INSERT INTO Assignments (course_id, employee_id) VALUES
(1, 3), -- Amit Verma assigned to Core Java Programming
(2, 4); -- Neha Jain assigned to Full Stack Web Development


INSERT INTO Progress (course_id, employee_id, progress_percent) VALUES
(1, 3, 75), -- Amit Verma completed 75% of Core Java Programming
(2, 4, 40); -- Neha Jain completed 40% of Full Stack Web Development


INSERT INTO Feedback (course_id, employee_id, rating, comments) VALUES
(1, 3, 5, 'Very well-structured course.'),
(2, 4, 4, 'Good course but needs more practical examples.');


SELECT u.name, r.role_name 
FROM Users u
JOIN Roles r ON u.role_id = r.role_id;

SELECT tr.title, tr.discription,tr.status, u.name AS account_manager 
FROM TrainingRequest tr
JOIN Users u ON tr.account_manager_id = u.user_id;

SELECT c.title, u.name AS employee, p.progress_percent 
FROM Assignments a
JOIN Courses c ON a.course_id = c.course_id
JOIN Users u ON a.employee_id = u.user_id
JOIN Progress p ON a.course_id = p.course_id AND a.employee_id = p.employee_id;

SELECT c.title, u.name AS employee, f.rating, f.comments 
FROM Feedback f
JOIN Courses c ON f.course_id = c.course_id
JOIN Users u ON f.employee_id = u.user_id;
